// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]
  orders    Order[]
}

enum Role {
  ADMIN
  CUSTOMER
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String
  description String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int      @id @default(autoincrement())
  title     String
  description String
  price     Float
  stock  Int @default(0)
  categoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  Category @relation(fields: [categoryId], references: [id])
  carts     Cart[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  totalPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  orders    Order[]
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  cartId    Int
  shippingAddress String
  taxPrice  Float?
  shippingPrice Float?
  totalPrice Float?
  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
}

enum STATUS {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
}

model Tax{
  id        Int      @id @default(autoincrement())
  taxPrice  Float?
  shippingPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}